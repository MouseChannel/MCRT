#version 460
//#extension GL_EXT_debug_printf : enable

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
//#include "../../Set_binding.h"
#include "sampling.glsl"
#include "common.h"
#include "ibl_binding.h"

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
//layout(local_size_x_id = 0) in;
//layout(local_size_y_id = 1) in;
//layout(local_size_z_id = 2) in;
layout(set = 0, binding = e_skybox) uniform samplerCube skybox;

layout(set = 0, binding = e_LUT_image, rgba32f) uniform image2D LUT;

vec2 calculateLUT(float NoV, float roughness, float size)
{

    vec3 V = vec3(sqrt(1.0 - NoV * NoV), 0.0, NoV);
    vec3 N = vec3(0.0, 0.0, 1.0);
    mat3 normal_coordinate = getNormalSpace(N);
    float A = 0.;
    float B = 0.;

    for (int i = 0; i < size; i++) {
        vec3 random = pcg3d_random(uvec3(i, gl_GlobalInvocationID));
        vec3 local_H = ImportanceSampleGGX(vec2(random), N, roughness);
        vec3 world_H = normal_coordinate * local_H;
        vec3 L = reflect(-V, world_H);

        float NoL = max(L.z, 0.001);
        float NoH = max(world_H.z, 0.001);
        float VoH = max(dot(V, world_H), 0.001);

        if (NoL > 1e-3) {
            float G = G_Smith(NoV, NoL, roughness);
            float Fc = pow(1 - dot(V, world_H), 5);
            A += (1 - Fc) * G * VoH / (NoV * NoH);
            B += Fc * G * VoH / (NoV * NoH);
        }
    }

    return vec2(A / size, B / size);
}

void main()
{
    float size = 1024;
    float NoV = (gl_GlobalInvocationID.x + 1) / size;
    float roughness = (gl_GlobalInvocationID.y + 1) / size;

    vec2 LUT_value = calculateLUT(NoV, roughness, size);

    imageStore(LUT, ivec2(gl_GlobalInvocationID), vec4(LUT_value, 0., 0.));
}
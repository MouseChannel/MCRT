#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_debug_printf : enable
#include "hit_payload.glsl"
#include "Binding.h"
#include "shaders/Data_struct.h"
#include "shaders/common.glsl"

 hitAttributeEXT vec2 attribs;
layout(location = 0) rayPayloadInEXT hitPayload prd;
layout(set = e_ray_tracing, binding = e_tlas) uniform accelerationStructureEXT topLevelAS;
layout(set = 1, binding = e_obj_addresses, scalar) buffer _Address
{
    Address address[];
}
addresses;
layout(buffer_reference, scalar) readonly buffer _Indices
{
    ivec3 indices[];
};
layout(buffer_reference, scalar) readonly buffer _Vertices
{

    Vertex vertices[];
    
};
void main()
{
    debugPrintfEXT("message123 \n" );
    if(prd.hashit){        
        return;        
    } 
    prd.hashit = true;

    ignoreIntersectionEXT;
    
    Address address = addresses.address[gl_InstanceCustomIndexEXT];
    _Vertices vertices = _Vertices(address.vertexAddress);
    _Indices indices = _Indices(address.indexAddress);
    ivec3 cur_indices = indices.indices[gl_PrimitiveID];
    
    Vertex a = vertices.vertices[cur_indices.x];

    Vertex b = vertices.vertices[cur_indices.y];

    Vertex c = vertices.vertices[cur_indices.z];

    const vec3 cur_world_pos = get_cur_world_position(a.pos,
                                                      b.pos,
                                                      c.pos,
                                                      attribs,
                                                      gl_ObjectToWorldEXT);

    uint rayFlags = gl_RayFlagsNoneEXT;

    // traceRayEXT(topLevelAS,     // acceleration structure
    //                 rayFlags,   // rayFlags
    //                 0xFF,       // cullMask
    //                 0,          // sbtRecordOffset
    //                 0,          // sbtRecordStride
    //                 1,          // missIndex
    //                 prd.ray_origin, // ray origin
    //                 0.1,        // ray min range
    //                 prd.ray_dir,// ray direction
    //                 10,         // ray max range
    //                 0           // payload (location = 0)
    //     );
        
    traceRayEXT(topLevelAS, // acceleration structure
                rayFlags, // rayFlags
                0xFF, // cullMask
                0, // sbtRecordOffset
                0, // sbtRecordStride
                0, // missIndex
                prd.ray_origin, // ray origin
                0.1f, // ray min range
                prd.ray_dir, // ray direction
                10.f, // ray max range
                0 // payload (location = 0)
    );

     
}
#version 460
#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#include "../common.glsl"
#include "./binding.h"

layout(binding = e_hdr_image) uniform sampler2D inputHDR;
layout(binding = e_skybox, rgba32f) uniform imageCube output_skybox;

vec3 getSamplingVector()
{
    
    vec2 st = gl_GlobalInvocationID.xy / vec2(imageSize(output_skybox));
    // if (gl_GlobalInvocationID.x > 4000) {
    //     debugPrintfEXT("%f \n", vec2(imageSize(output_skybox)).x);
    // }
    vec2 uv = 2.0 * vec2(st.x, 1.0 - st.y) - vec2(1.0);

    vec3 ret;
    // Select vector based on cubemap face index.
    // Sadly 'switch' doesn't seem to work, at least on NVIDIA.
    if (gl_GlobalInvocationID.z == 0)
        ret = vec3(1.0, uv.y, -uv.x);
    else if (gl_GlobalInvocationID.z == 1)
        ret = vec3(-1.0, uv.y, uv.x);
    else if (gl_GlobalInvocationID.z == 2)
        ret = vec3(uv.x, 1.0, -uv.y);
    else if (gl_GlobalInvocationID.z == 3)
        ret = vec3(uv.x, -1.0, uv.y);
    else if (gl_GlobalInvocationID.z == 4)
        ret = vec3(uv.x, uv.y, 1.0);
    else if (gl_GlobalInvocationID.z == 5)
        ret = vec3(-uv.x, uv.y, -1.0);
    return normalize(ret);
}

// layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void main(void)
{
    vec3 v = getSamplingVector();

    // Convert Cartesian direction vector to spherical coordinates.
    float phi = atan(v.z, v.x);
    float theta = acos(v.y);

    // Sample equirectangular texture.
    vec4 color = texture(inputHDR, vec2(phi / (2 * PI), theta / PI));

    // Write out color to output cubemap.
    imageStore(output_skybox, ivec3(gl_GlobalInvocationID), color);
}

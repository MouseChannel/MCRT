#version 460

// const float Epsilon = 0.00001;
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
const uint NumSamples = 1024;
const float InvNumSamples = 1.0 / float(NumSamples);
#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#include "../common.glsl"
#include "./binding.h"
#include "./push_constants.h"
layout(binding = e_skybox) uniform samplerCube skybox;

layout(binding = e_skybox_mipmap, rgba32f) uniform imageCube skybox_mipmap[];

layout(push_constant) uniform _PushContant_SKYBOX
{
    PushContant_SKYBOX pc;
};

vec3 getSamplingVector()
{
    vec2 st = gl_GlobalInvocationID.xy / vec2(imageSize(skybox_mipmap[pc.level]));
    vec2 uv = 2.0 * vec2(st.x, 1.0 - st.y) - vec2(1.0);

    vec3 ret;
    // Sadly 'switch' doesn't seem to work, at least on NVIDIA.
    if (gl_GlobalInvocationID.z == 0)
        ret = vec3(1.0, uv.y, -uv.x);
    else if (gl_GlobalInvocationID.z == 1)
        ret = vec3(-1.0, uv.y, uv.x);
    else if (gl_GlobalInvocationID.z == 2)
        ret = vec3(uv.x, 1.0, -uv.y);
    else if (gl_GlobalInvocationID.z == 3)
        ret = vec3(uv.x, -1.0, uv.y);
    else if (gl_GlobalInvocationID.z == 4)
        ret = vec3(uv.x, uv.y, 1.0);
    else if (gl_GlobalInvocationID.z == 5)
        ret = vec3(-uv.x, uv.y, -1.0);
    return normalize(ret);
}
// nonuniformEXT(pc_raster.color_texture_index)
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void main(void)
{
    // Make sure we won't write past output when computing higher mipmap levels.
    ivec2 outputSize = imageSize(skybox_mipmap[nonuniformEXT(pc.level)]);
    if (gl_GlobalInvocationID.x >= outputSize.x || gl_GlobalInvocationID.y >= outputSize.y) {
        return;
    }

    // Solid angle associated with a single cubemap texel at zero mipmap level.
    // This will come in handy for importance sampling below.
    vec2 inputSize = vec2(textureSize(skybox, 0));
    float wt = 4.0 * PI / (6 * inputSize.x * inputSize.y);

    // Approximation: Assume zero viewing angle (isotropic reflections).
    vec3 N = getSamplingVector();
    vec3 Lo = N;

    vec3 S, T;
    computeBasisVectors(N, S, T);

    vec3 color = vec3(0);
    float weight = 0;

    for (uint i = 0; i < NumSamples; ++i) {
        vec2 u = sampleHammersley(i, InvNumSamples);
        vec3 Lh = tangentToWorld(sampleGGX(u.x, u.y, pc.roughness), N, S, T);

        // Compute incident direction (Li) by reflecting viewing direction (Lo) around half-vector (Lh).
        vec3 Li = 2.0 * dot(Lo, Lh) * Lh - Lo;

        float cosLi = dot(N, Li);
        if (cosLi > 0.0) {
            // Use Mipmap Filtered Importance Sampling to improve convergence.
            // See: https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch20.html, section 20.4

            float cosLh = max(dot(N, Lh), 0.0);

            float pdf = ndfGGX(cosLh, pc.roughness) * 0.25;

            // Solid angle associated with this sample.
            float ws = 1.0 / (NumSamples * pdf);

            // Mip level to sample from.
            float mipLevel = max(0.5 * log2(ws / wt) + 1.0, 0.0);

            color += textureLod(skybox, Li, mipLevel).rgb * cosLi;
            weight += cosLi;
        }
    }
    color /= weight;

    imageStore(skybox_mipmap[pc.level], ivec3(gl_GlobalInvocationID), vec4(color, 1.0));
}

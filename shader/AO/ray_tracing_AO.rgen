#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_ARB_shader_clock : enable
// #extension GL_GOOGLE_cpp_style_line_direcitve :  require
#include "../Data_struct.h"
#include "../common.glsl"
#include "../sampling.glsl"
// #include "../Set_binding.h"
#include "Binding.h"
#include "hit_payload.glsl"

layout(push_constant) uniform _PushContant
{
    AOPushContant pcRay;
};
layout(location = 0) rayPayloadEXT hitPayload prd;
// layout(location = 1) rayPayloadEXT bool isShadowed;
layout(set = e_ray_tracing, binding = e_tlas) uniform accelerationStructureEXT topLevelAS;
layout(set = e_ray_tracing, binding = e_out_image, rgba32f) uniform image2D image;
layout(set = e_ray_tracing, binding = e_ao_image, rgba32f) uniform image2D ao_image;
layout(set = e_ray_global, binding = e_camera) uniform _camera_data
{
    Camera_data camera_data;
};
void main()
{

    vec3 ray_origin = camera_data.camera_pos.xyz;
    vec3 ray_dir = get_camera_dir(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, camera_data);
    uint rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin = 0.001;
    float tMax = 10000.0;

    prd.hitValue = vec3(0);

    traceRayEXT(topLevelAS, // acceleration structure
                rayFlags, // rayFlags
                0xFF, // cullMask
                0, // sbtRecordOffset
                0, // sbtRecordStride
                0, // missIndex
                ray_origin, // ray origin
                tMin, // ray min range
                ray_dir, // ray direction
                tMax, // ray max range
                0 // payload (location = 0)
    );

    if (pcRay.enable_ao == 1) {

        if (pcRay.frame > 0) {
            float a = 1.0f / float(pcRay.frame + 1);
            float old_ao = imageLoad(ao_image, ivec2(gl_LaunchIDEXT.xy)).x;
            float new_ao = mix(old_ao, prd.cc, a);
            imageStore(ao_image, ivec2(gl_LaunchIDEXT.xy), vec4(new_ao, vec3(0)));
            imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue * new_ao, 0));
        } else {
            imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 0));
        }
    } else {
        // debugPrintfEXT("message %d\n", pcRay.sample_count);
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 0));
    }
}

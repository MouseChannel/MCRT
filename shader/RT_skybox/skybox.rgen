
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_ARB_shader_clock : enable
// #extension GL_GOOGLE_cpp_style_line_direcitve :  require
#include "../Data_struct.h"
#include "../common.glsl"
#include "../sampling.glsl"
#include "Binding.h"
#include "Push_Constants.h"
#include "hit_payload.glsl"

layout(push_constant) uniform _PushContant
{
    PushContant pcRay;
};
layout(location = 0) rayPayloadEXT hitPayload prd;
// layout(location = 1) rayPayloadEXT bool isShadowed;
layout(set = 0, binding = e_tlas) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = e_out_image, rgba32f) uniform image2D image;

layout(set = 1, binding = e_camera) uniform _camera_data
{
    Camera_data camera_data;
};
void main()
{

    ivec2 temp = ivec2(gl_LaunchIDEXT);
    vec3 ray_origin = camera_data.camera_pos.xyz;
    vec3 ray_dir = get_camera_dir(temp, gl_LaunchSizeEXT.xy, camera_data);
    // debugPrintfEXT("message %d %d\n", gl_LaunchSizeEXT.x, gl_LaunchSizeEXT.y);

    uint rayFlags = gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT | gl_RayFlagsTerminateOnFirstHitEXT;
    float tMin = 0.001;
    float tMax = 10000.0;

    prd.ray_origin = ray_origin;
    prd.ray_dir = ray_dir;
    prd.hitValue = vec3(0);
    prd.depth = 0;
    if (gl_LaunchIDEXT.x != temp.x || gl_LaunchIDEXT.y != temp.y)
        return;

    traceRayEXT(topLevelAS, // acceleration structure
                rayFlags, // rayFlags
                0xFF, // cullMask
                0, // sbtRecordOffset
                0, // sbtRecordStride
                0, // missIndex
                prd.ray_origin, // ray origin
                tMin, // ray min range
                normalize(ray_dir), // ray direction
                tMax, // ray max range
                0 // payload (location = 0)
    );

    // debugPrintfEXT("message 2 \n");
    // imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 0));
    if (pcRay.frame > 0) {
        float a = 1.0f / float(pcRay.frame + 1);
        vec3 old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        vec3 new_color = mix(old_color, prd.hitValue, a);
        // debugPrintfEXT("message %f %f %f| %f %f %f \n", old_color.x, old_color.y, old_color.z, new_color.x, new_color.y, new_color.z);
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(new_color, 1.f));
    } else {
        // First frame, replace the value in the buffer
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 1.f));
    }
}

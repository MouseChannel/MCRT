#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_ARB_shader_clock : enable
// #extension GL_GOOGLE_cpp_style_line_direcitve :  require
#include "../Data_struct.h"
#include "../common.glsl"
// #include "sampling.glsl"

layout(set = 0, binding = e_tlas) uniform accelerationStructureEXT topLevelAS;
layout(set = 1, binding = e_camera) uniform _camera_data
{
    Camera_data camera_data;
};
layout(set = 0, binding = e_out_image, rgba32f) uniform image2D image;
layout(location = 0) rayPayloadEXT hitPayload prd;
void main()
{
    vec3 ray_origin = camera_data.camera_pos.xyz;

    vec3 ray_dir = get_camera_dir(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, camera_data);

    traceRayEXT(topLevelAS, // acceleration structure
                gl_RayFlagsNoneEXT, // rayFlags
                0xFF, // cullMask
                0, // sbtRecordOffset
                0, // sbtRecordStride
                0, // missIndex
                ray_origin, // ray origin
                0.001, // ray min range
                ray_dir, // ray direction
                10000, // ray max range
                0 // payload (location = 0)
    );
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 1.f));
}

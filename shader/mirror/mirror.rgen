#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_ARB_shader_clock : enable
// #extension GL_GOOGLE_cpp_style_line_direcitve :  require
#include "../Data_struct.h"
#include "../common.glsl"
#include "../sampling.glsl"
#include "hit_payload.glsl"

layout(push_constant) uniform _PushContant
{
    PushContant pcRay;
};
layout(location = 0) rayPayloadEXT hitPayload prd;
layout(location = 1) rayPayloadEXT bool isShadowed;
layout(set = 0, binding = e_tlas) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = e_out_image, rgba32f) uniform image2D image;
// gbuffer
// layout(set = 0, binding = e_position_gbuffer, rgba32f) uniform image2D posiiotn;
// layout(set = 0, binding = e_normal_gbuffer, rgba32f) uniform image2D normal;
// gbuffer end
layout(set = 1, binding = e_camera) uniform _camera_data
{

    Camera_data camera_data;
};
void main()
{

    vec3 ray_origin = camera_data.camera_pos.xyz;
    vec3 ray_dir = get_camera_dir(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, camera_data);
    uint rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin = 0.001;
    float tMax = 10000.0;

    prd.hitValue = vec3(0);
    prd.depth = 0;

    prd.origin = ray_origin;
    prd.direction = ray_dir;

    while (prd.depth < 10) {
        traceRayEXT(topLevelAS, // acceleration structure
                    gl_RayFlagsOpaqueEXT, // rayFlags
                    0xFF, // cullMask
                    0, // sbtRecordOffset
                    0, // sbtRecordStride
                    0, // missIndex
                    prd.origin, // ray origin
                    tMin, // ray min range
                    prd.direction, // ray direction
                    tMax, // ray max range
                    0 // payload (location = 0)
        );
       
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 0));
}

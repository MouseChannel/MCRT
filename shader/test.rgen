#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

// #extension GL_GOOGLE_cpp_style_line_direcitve :  require
#include "Data_struct.h"

#include "common.glsl"

layout(push_constant) uniform _PushContant_Ray
{
    PushContant_Ray s;
};
layout(location = 0) rayPayloadEXT hitPayload prd;
layout(set = 0, binding = tlas) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = out_image, rgba32f) uniform image2D image;
layout(set = 1, binding = eGlobals) uniform _camera_data
{
    Camera_data camera_data;
};
void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec2 texCoord = (vec2(gl_LaunchIDEXT.xy) + 0.5) / vec2(gl_LaunchSizeEXT.xy);
    vec3 ray_origin = camera_data.camera_pos.xyz;
    vec3 ray_dir = camera_data.camera_front.xyz + vec3(d, 0);

    uint rayFlags = gl_RayFlagsNoneEXT;
    float tMin = 0.001;
    float tMax = 10000.0;
    vec3 curWeight = vec3(1);
    vec3 hitValue = vec3(0);
    if (gl_LaunchIDEXT.x == 1 && gl_LaunchIDEXT.y == 1)
        debugPrintfEXT("message from rgen %f %f %f\n", ray_origin.x, ray_origin.y, ray_origin.z);
    traceRayEXT(topLevelAS, // acceleration structure
                rayFlags, // rayFlags
                0xFF, // cullMask
                0, // sbtRecordOffset
                0, // sbtRecordStride
                0, // missIndex
                ray_origin, // ray origin
                tMin, // ray min range
                ray_dir, // ray direction
                tMax, // ray max range
                0 // payload (location = 0)
    );

    while (prd.depth++ < 10 && false) {
        traceRayEXT(topLevelAS, // acceleration structure
                    rayFlags, // rayFlags
                    0xFF, // cullMask
                    0, // sbtRecordOffset
                    0, // sbtRecordStride
                    0, // missIndex
                    ray_origin, // ray origin
                    tMin, // ray min range
                    ray_dir, // ray direction
                    tMax, // ray max range
                    0 // payload (location = 0)
        );
        hitValue += prd.hitValue * curWeight;
        curWeight *= prd.weight;
    }
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 1.0));
}